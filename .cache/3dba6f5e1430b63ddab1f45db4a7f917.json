{"id":"../../node_modules/ecurve/lib/curve.js","dependencies":[{"name":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/ecurve/package.json","includedInParent":true,"mtime":1536067589205},{"name":"/Users/sam/Documents/Projects/steem/finallynetwork/package.json","includedInParent":true,"mtime":1536781094103},{"name":"/Users/sam/Documents/Projects/steem/finallynetwork/.babelrc","includedInParent":true,"mtime":1535982004941},{"name":"assert","loc":{"line":1,"column":21},"parent":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/ecurve/lib/curve.js","resolved":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/assert/assert.js"},{"name":"bigi","loc":{"line":2,"column":25},"parent":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/ecurve/lib/curve.js","resolved":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/bigi/lib/index.js"},{"name":"./point","loc":{"line":4,"column":20},"parent":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/ecurve/lib/curve.js","resolved":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/ecurve/lib/point.js"}],"generated":{"js":"var assert = require('assert')\nvar BigInteger = require('bigi')\n\nvar Point = require('./point')\n\nfunction Curve (p, a, b, Gx, Gy, n, h) {\n  this.p = p\n  this.a = a\n  this.b = b\n  this.G = Point.fromAffine(this, Gx, Gy)\n  this.n = n\n  this.h = h\n\n  this.infinity = new Point(this, null, null, BigInteger.ZERO)\n\n  // result caching\n  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)\n\n  // determine size of p in bytes\n  this.pLength = Math.floor((this.p.bitLength() + 7) / 8)\n}\n\nCurve.prototype.pointFromX = function (isOdd, x) {\n  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)\n  var beta = alpha.modPow(this.pOverFour, this.p) // XXX: not compatible with all curves\n\n  var y = beta\n  if (beta.isEven() ^ !isOdd) {\n    y = this.p.subtract(y) // -y % p\n  }\n\n  return Point.fromAffine(this, x, y)\n}\n\nCurve.prototype.isInfinity = function (Q) {\n  if (Q === this.infinity) return true\n\n  return Q.z.signum() === 0 && Q.y.signum() !== 0\n}\n\nCurve.prototype.isOnCurve = function (Q) {\n  if (this.isInfinity(Q)) return true\n\n  var x = Q.affineX\n  var y = Q.affineY\n  var a = this.a\n  var b = this.b\n  var p = this.p\n\n  // Check that xQ and yQ are integers in the interval [0, p - 1]\n  if (x.signum() < 0 || x.compareTo(p) >= 0) return false\n  if (y.signum() < 0 || y.compareTo(p) >= 0) return false\n\n  // and check that y^2 = x^3 + ax + b (mod p)\n  var lhs = y.square().mod(p)\n  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)\n  return lhs.equals(rhs)\n}\n\n/**\n * Validate an elliptic curve point.\n *\n * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive\n */\nCurve.prototype.validate = function (Q) {\n  // Check Q != O\n  assert(!this.isInfinity(Q), 'Point is at infinity')\n  assert(this.isOnCurve(Q), 'Point is not on the curve')\n\n  // Check nQ = O (where Q is a scalar multiple of G)\n  var nQ = Q.multiply(this.n)\n  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')\n\n  return true\n}\n\nmodule.exports = Curve\n","map":{"mappings":[{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/ecurve/lib/curve.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}}],"sources":{"../../node_modules/ecurve/lib/curve.js":"var assert = require('assert')\nvar BigInteger = require('bigi')\n\nvar Point = require('./point')\n\nfunction Curve (p, a, b, Gx, Gy, n, h) {\n  this.p = p\n  this.a = a\n  this.b = b\n  this.G = Point.fromAffine(this, Gx, Gy)\n  this.n = n\n  this.h = h\n\n  this.infinity = new Point(this, null, null, BigInteger.ZERO)\n\n  // result caching\n  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)\n\n  // determine size of p in bytes\n  this.pLength = Math.floor((this.p.bitLength() + 7) / 8)\n}\n\nCurve.prototype.pointFromX = function (isOdd, x) {\n  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)\n  var beta = alpha.modPow(this.pOverFour, this.p) // XXX: not compatible with all curves\n\n  var y = beta\n  if (beta.isEven() ^ !isOdd) {\n    y = this.p.subtract(y) // -y % p\n  }\n\n  return Point.fromAffine(this, x, y)\n}\n\nCurve.prototype.isInfinity = function (Q) {\n  if (Q === this.infinity) return true\n\n  return Q.z.signum() === 0 && Q.y.signum() !== 0\n}\n\nCurve.prototype.isOnCurve = function (Q) {\n  if (this.isInfinity(Q)) return true\n\n  var x = Q.affineX\n  var y = Q.affineY\n  var a = this.a\n  var b = this.b\n  var p = this.p\n\n  // Check that xQ and yQ are integers in the interval [0, p - 1]\n  if (x.signum() < 0 || x.compareTo(p) >= 0) return false\n  if (y.signum() < 0 || y.compareTo(p) >= 0) return false\n\n  // and check that y^2 = x^3 + ax + b (mod p)\n  var lhs = y.square().mod(p)\n  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)\n  return lhs.equals(rhs)\n}\n\n/**\n * Validate an elliptic curve point.\n *\n * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive\n */\nCurve.prototype.validate = function (Q) {\n  // Check Q != O\n  assert(!this.isInfinity(Q), 'Point is at infinity')\n  assert(this.isOnCurve(Q), 'Point is not on the curve')\n\n  // Check nQ = O (where Q is a scalar multiple of G)\n  var nQ = Q.multiply(this.n)\n  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')\n\n  return true\n}\n\nmodule.exports = Curve\n"},"lineCount":78}},"hash":"5e2efea089c7b2699eb4811e5bfe13ee","cacheData":{"env":{}}}