{"id":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","dependencies":[{"name":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/steem/lib/auth/serializer/package.json","includedInParent":true,"mtime":1516696569000},{"name":"/Users/sam/Documents/Projects/steem/finallynetwork/package.json","includedInParent":true,"mtime":1536781094103},{"name":"/Users/sam/Documents/Projects/steem/finallynetwork/.babelrc","includedInParent":true,"mtime":1535982004941},{"name":"assert","loc":{"line":14,"column":22},"parent":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/steem/lib/auth/serializer/src/number_utils.js","resolved":"/Users/sam/Documents/Projects/steem/finallynetwork/node_modules/assert/assert.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.toImpliedDecimal = toImpliedDecimal;\nexports.fromImpliedDecimal = fromImpliedDecimal;\n\nvar _assert = require(\"assert\");\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n    Convert 12.34 with a precision of 3 into 12340\n\n    @arg {number|string} number - Use strings for large numbers.  This may contain one decimal but no sign\n    @arg {number} precision - number of implied decimal places (usually causes right zero padding)\n    @return {string} -\n*/\nfunction toImpliedDecimal(number, precision) {\n\n    if (typeof number === \"number\") {\n        (0, _assert2.default)(number <= 9007199254740991, \"overflow\");\n        number = \"\" + number;\n    } else if (number.toString) number = number.toString();\n\n    (0, _assert2.default)(typeof number === \"string\", \"number should be an actual number or string: \" + (typeof number === \"undefined\" ? \"undefined\" : _typeof(number)));\n    number = number.trim();\n    (0, _assert2.default)(/^[0-9]*\\.?[0-9]*$/.test(number), \"Invalid decimal number \" + number);\n\n    var _number$split = number.split(\".\"),\n        _number$split2 = _slicedToArray(_number$split, 2),\n        _number$split2$ = _number$split2[0],\n        whole = _number$split2$ === undefined ? \"\" : _number$split2$,\n        _number$split2$2 = _number$split2[1],\n        decimal = _number$split2$2 === undefined ? \"\" : _number$split2$2;\n\n    var padding = precision - decimal.length;\n    (0, _assert2.default)(padding >= 0, \"Too many decimal digits in \" + number + \" to create an implied decimal of \" + precision);\n\n    for (var i = 0; i < padding; i++) {\n        decimal += \"0\";\n    }while (whole.charAt(0) === \"0\") {\n        whole = whole.substring(1);\n    }return whole + decimal;\n}\n\nfunction fromImpliedDecimal(number, precision) {\n    if (typeof number === \"number\") {\n        (0, _assert2.default)(number <= 9007199254740991, \"overflow\");\n        number = \"\" + number;\n    } else if (number.toString) number = number.toString();\n\n    while (number.length < precision + 1) {\n        // 0.123\n        number = \"0\" + number;\n    } // 44000 => 44.000\n    var dec_string = number.substring(number.length - precision);\n    return number.substring(0, number.length - precision) + (dec_string ? \".\" + dec_string : \"\");\n}","map":{"mappings":[{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/steem/lib/auth/serializer/src/number_utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}}],"sources":{"../../node_modules/steem/lib/auth/serializer/src/number_utils.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.toImpliedDecimal = toImpliedDecimal;\nexports.fromImpliedDecimal = fromImpliedDecimal;\n\nvar _assert = require(\"assert\");\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n    Convert 12.34 with a precision of 3 into 12340\n\n    @arg {number|string} number - Use strings for large numbers.  This may contain one decimal but no sign\n    @arg {number} precision - number of implied decimal places (usually causes right zero padding)\n    @return {string} -\n*/\nfunction toImpliedDecimal(number, precision) {\n\n    if (typeof number === \"number\") {\n        (0, _assert2.default)(number <= 9007199254740991, \"overflow\");\n        number = \"\" + number;\n    } else if (number.toString) number = number.toString();\n\n    (0, _assert2.default)(typeof number === \"string\", \"number should be an actual number or string: \" + (typeof number === \"undefined\" ? \"undefined\" : _typeof(number)));\n    number = number.trim();\n    (0, _assert2.default)(/^[0-9]*\\.?[0-9]*$/.test(number), \"Invalid decimal number \" + number);\n\n    var _number$split = number.split(\".\"),\n        _number$split2 = _slicedToArray(_number$split, 2),\n        _number$split2$ = _number$split2[0],\n        whole = _number$split2$ === undefined ? \"\" : _number$split2$,\n        _number$split2$2 = _number$split2[1],\n        decimal = _number$split2$2 === undefined ? \"\" : _number$split2$2;\n\n    var padding = precision - decimal.length;\n    (0, _assert2.default)(padding >= 0, \"Too many decimal digits in \" + number + \" to create an implied decimal of \" + precision);\n\n    for (var i = 0; i < padding; i++) {\n        decimal += \"0\";\n    }while (whole.charAt(0) === \"0\") {\n        whole = whole.substring(1);\n    }return whole + decimal;\n}\n\nfunction fromImpliedDecimal(number, precision) {\n    if (typeof number === \"number\") {\n        (0, _assert2.default)(number <= 9007199254740991, \"overflow\");\n        number = \"\" + number;\n    } else if (number.toString) number = number.toString();\n\n    while (number.length < precision + 1) {\n        // 0.123\n        number = \"0\" + number;\n    } // 44000 => 44.000\n    var dec_string = number.substring(number.length - precision);\n    return number.substring(0, number.length - precision) + (dec_string ? \".\" + dec_string : \"\");\n}"},"lineCount":67}},"hash":"a4908485d576154b2d0f0eb7879f0ef6","cacheData":{"env":{}}}